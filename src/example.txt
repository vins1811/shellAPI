"Esempio 1:
Input: "Genera un endpoint GET che restituisca un messaggio di benvenuto."
Risposta:
from fastapi import FastAPI
app = FastAPI()

@app.get("/welcome")
async def welcome():
    return {"message": "Benvenuto!"}

Esempio 2:
Input: "Genera un endpoint POST per creare un nuovo utente. L'utente ha nome e email."
Risposta:
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

app = FastAPI()

class User(BaseModel):
    name: str
    email: str

@app.post("/users")
async def create_user(user: User):
    # Esegui controlli, ad es. per email duplicata
    return {"message": "Utente creato", "user": user.dict()}

Esempio 3:
Input: "Genera un endpoint PUT per aggiornare i dati di un utente esistente."
Risposta:
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

app = FastAPI()

class UserUpdate(BaseModel):
    name: str
    email: str

@app.put("/users/{user_id}")
async def update_user(user_id: int, user: UserUpdate):
    # Verifica se l'utente esiste, altrimenti lancia un'eccezione
    return {"message": "Utente aggiornato", "user": user.dict()}

Esempio 4:
Input: "Genera un endpoint DELETE per eliminare un utente in base all'id."
Risposta:
from fastapi import FastAPI, HTTPException

app = FastAPI()

@app.delete("/users/{user_id}")
async def delete_user(user_id: int):
    # Verifica se l'utente esiste, altrimenti restituisci errore 404
    return {"message": "Utente eliminato con successo"}